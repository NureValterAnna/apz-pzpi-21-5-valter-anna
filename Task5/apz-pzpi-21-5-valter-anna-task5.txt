1 РОЗРОБКА МОБІЛЬНОЇ ЧАСТИНИ ПРОЕКТУ
4.1 Опис архітектури мобільної частини

Для мобільної частини проекту використано мову програмування C# та платформу .NET Multi-Platform App UI (.NET MAUI) для створення мобільних додатків. Проект побудовано на основі принципів Domain-Driven Design (DDD), що дозволило чітко розділити відповідальність між різними компонентами системи, забезпечуючи високу підтримуваність та можливість розширення коду.
Для організації HTTP-запитів у проекті використовується клас HttpClient, який забезпечує функціональність для відправлення запитів до веб-серверів і отримання відповідей. Використання HttpClient для організації HTTP-запитів у .NET MAUI проекті включає створення запиту, встановлення необхідних параметрів, відправку запиту, обробку відповіді та збереження результатів. Це забезпечує ефективну взаємодію мобільного застосунку з веб-сервером для виконання різних операцій.
Мобільний застосунок передбачає використання вже зареєстрованим користувачем з роллю пацієнт. У цій частині системи реалізується бізнес логіка прийому медичних засобів пацієнтом з відповідного дозуючого пристрою.

4.2 Реалізація мобільної частини системи
4.2.1 Авторизація та управління доступом користувачів

Першим чином користувач потрапляє на сторінку авторизації.
Рисунок 4.1 – Сторінка авторизації
Цей компонент реалізує авторизацію за допомогою відповідного сервісу – UserService (додаток М).
Після успішної авторизації сервер повертає JWT токен, який зберігається в конфігурації додатку для подальшого використання.
4.2.2 Бізнес логіка

Після успішної авторизації, сторінка, на яку потрапляє користувач – перелік його медичних призначень.
Рисунок 4.2 – Сторінка з переліком призначень авторизованого пацієнта
На цьому етапі пацієнт має можливість обрати який саме медичний засіб із своїх призначень він бажає отримати, а також має можливість вийти із системи за допомогою кнопки Logout. 
Після вибору призначення за яким користувач бажає отримати ліки він потрапляє на сторінку, де представлені усі дозуючі пристрої, у яких знаходиться бажаний медичний засіб. На цій сторінці, після вибору дозуючого пристрою, користувач має виконати отримання препарату за допомогою натискання кнопки Get Pill. Також можливе повернення до списку призначень з метою вибору іншого з них.
Рисунок 4.3 – Сторінка з доступними дозуючими пристроями
Завдяки методам бізнес логіки, що реалізовані у клієнтському застосунку є можливість відслідкувати прийом медичних засобів пацієнтом. У веб частині системи користувач може також потрапити  на список своїх призначень, але там він має функції лише для моніторингу прийому, що відбувається завдяки мобільному застосунку. 
Отже, при виборі списку своїх медичних засобів пацієнт може бачити назву медичного засобу, його дозу, кількість обов’язкових прийомів на день, дати початку та кінця отримання ліків за кожноим призначенням, а і останньому стовпчику процент вже прийнятих ліків на даний момент. Нижче на рисунках представлено прогрес за призначенням до та після прийому ліків завдяки мобільній частині системи.
Рисунок 4.4 – Сторінка з клієнтської частини з прогресом відстеження прийому медичних засобів для пацієнта до прийому ліків у мобільному застосунку
Рисунок 4.5 – Сторінка з клієнтської частини з прогресом відстеження прийому медичних засобів для пацієнта після прийому ліків у мобільному застосунку

4.2.3 Локалізація
З метою локалізації мобільної частини було використано файли ресурсів. В залежності від конфігурації пристрою, користувачу доступна англійська чи українська версію застосунку.

ВИСНОВКИ

У рамках цієї лабораторної роботи була розроблена мобільна частина проекту. Були побудовані діаграми компонентів та прецедентів.
Посилання на репозиторій проекту: https://github.com/NureValterAnna/apz-pzpi-21-5-valter-anna/tree/main
Посилання на відео: https://youtu.be/plKyU4tlkdE
 
ДОДАТОК А

Код класу PrescriptionService:
using System.Net.Http.Headers;
using System.Net.Http.Json;
using Application.Configurations;
using Application.Interfaces;
using Application.Prescriptions.Queries;
using Domain.Entities;
namespace Infrastructure.Services;
public class PrescriptionService : IPrescriptionService
{
    private readonly TokenConfiguration _tokenConfiguration;

    public PrescriptionService(TokenConfiguration tokenConfiguration)
    {
        _tokenConfiguration = tokenConfiguration;
    }

    public async Task<List<Prescription>> GetPrescriptionsByEmailAsync()
    {
        var httpClient = new HttpClient()
        {
            BaseAddress = new Uri("http://10.0.2.2:8080/api/"),
            DefaultRequestHeaders =
            {
                Authorization = new AuthenticationHeaderValue("Bearer", _tokenConfiguration.Token)
            }
        };

        var httpRequestMessage = new HttpRequestMessage()
        {
            Method = HttpMethod.Get,
            RequestUri = new Uri("Prescription", UriKind.Relative)
        };
        
        var response = await httpClient.SendAsync(httpRequestMessage);
        if (!response.IsSuccessStatusCode)
        {
            _tokenConfiguration.Token = null;
            return default;
        }
        
        var prescriptions = await response.Content.ReadFromJsonAsync<List<Prescription>>();
        return prescriptions;
    }
}

ДОДАТОК Б
Рисунок 7 – Діаграма прецедентів

ДОДАТОК В

Рисунок 8 – Діаграма компонентів